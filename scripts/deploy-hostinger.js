#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import readline from 'readline';

console.log('üöÄ Iniciando deploy para Hostinger...');

try {
  // 1. Verificar se est√° no branch correto
  const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
  console.log(`üìç Branch atual: ${branch}`);
  
  if (branch !== 'main' && branch !== 'master') {
    console.log('‚ö†Ô∏è  Aviso: Voc√™ n√£o est√° no branch main/master');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const answer = await new Promise(resolve => {
      rl.question('Deseja continuar mesmo assim? (y/N): ', resolve);
    });
    
    rl.close();
    
    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      console.log('‚ùå Deploy cancelado pelo usu√°rio');
      process.exit(0);
    }
  }
  
  // 2. Verificar se h√° mudan√ßas n√£o commitadas
  const status = execSync('git status --porcelain', { encoding: 'utf8' });
  if (status) {
    console.log('‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas:');
    console.log(status);
    console.log('\nüí° Commit suas mudan√ßas antes do deploy:');
    console.log('git add .');
    console.log('git commit -m "Suas altera√ß√µes"');
    process.exit(1);
  }
  
  // 3. Verificar se Node.js est√° na vers√£o correta
  const nodeVersion = process.version;
  console.log(`üü¢ Node.js version: ${nodeVersion}`);
  
  // 4. Instalar depend√™ncias
  console.log('üì¶ Instalando depend√™ncias...');
  execSync('npm ci', { stdio: 'inherit' });
  
  // 5. Executar testes
  console.log('üß™ Executando testes...');
  try {
    execSync('npm run test:run', { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ùå Testes falharam! Corrija os erros antes do deploy.');
    process.exit(1);
  }
  
  // 6. Verificar lint
  console.log('üîç Verificando c√≥digo (lint)...');
  try {
    execSync('npm run lint', { stdio: 'inherit' });
  } catch (error) {
    console.log('‚ùå Lint falhou! Corrija os problemas de c√≥digo.');
    process.exit(1);
  }
  
  // 7. Build da aplica√ß√£o
  console.log('üèóÔ∏è  Fazendo build da aplica√ß√£o...');
  execSync('npm run build', { stdio: 'inherit' });
  
  // 8. Verificar se o build foi criado
  if (!fs.existsSync('dist')) {
    throw new Error('‚ùå Pasta dist n√£o foi criada!');
  }
  
  // 9. Gerar .htaccess
  console.log('üîß Gerando arquivo .htaccess...');
  const htaccessContent = `# PetShop Romeo & Julieta - Hostinger Configuration

# Enable HTTPS redirect
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Handle React Router (SPA)
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.html [L]

# Security Headers
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>

# Compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/javascript
</IfModule>

# Cache Control
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
</IfModule>
`;
  
  fs.writeFileSync(path.join('dist', '.htaccess'), htaccessContent);
  
  console.log('‚úÖ Build conclu√≠do com sucesso!');
  console.log('üìä Informa√ß√µes do build:');
  
  // Mostrar tamanho do build
  try {
    execSync('du -sh dist/', { stdio: 'inherit' });
  } catch {
    // Fallback para Windows
    const stats = fs.statSync('dist');
    console.log(`üì¶ Tamanho aproximado: ${Math.round(stats.size / 1024)}KB`);
  }
  
  // Listar arquivos principais
  console.log('\nüìÅ Arquivos principais:');
  const files = fs.readdirSync('dist');
  files.forEach(file => {
    const filePath = path.join('dist', file);
    const stats = fs.statSync(filePath);
    if (stats.isFile()) {
      console.log(`   ${file} (${Math.round(stats.size / 1024)}KB)`);
    }
  });
  
  console.log('\nüéâ Deploy local pronto!');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Verifique os arquivos em dist/');
  console.log('2. Fa√ßa o push para GitHub para deploy autom√°tico:');
  console.log('   git push origin main');
  console.log('3. Ou fa√ßa upload manual via FTP para Hostinger');
  console.log('\nüåê Ap√≥s o deploy, acesse: https://seu-dominio.com');
  
} catch (error) {
  console.error('‚ùå Erro durante o deploy:', error.message);
  console.log('\nüîß Poss√≠veis solu√ß√µes:');
  console.log('- Verifique se todas as depend√™ncias est√£o instaladas');
  console.log('- Corrija erros de lint e testes');
  console.log('- Verifique as vari√°veis de ambiente');
  console.log('- Execute: npm install && npm run build');
  process.exit(1);
}