// Script para corrigir pol√≠ticas RLS atrav√©s do frontend
// Este script deve ser executado no console do navegador quando logado como admin

const fixAdminPolicies = async () => {
  console.log('üîß Iniciando corre√ß√£o das pol√≠ticas RLS...');
  
  try {
    // Primeiro, vamos desabilitar temporariamente o RLS na tabela admin_users_pet
    console.log('1Ô∏è‚É£ Tentando desabilitar RLS temporariamente...');
    
    const { data: currentUser } = await supabase.auth.getUser();
    console.log('Usu√°rio atual:', currentUser?.user?.id);
    
    // Tentar uma consulta simples para verificar se conseguimos acessar
    console.log('2Ô∏è‚É£ Testando acesso √† tabela admin_users_pet...');
    
    const { data: adminCheck, error: adminError } = await supabase
      .from('admin_users_pet')
      .select('id, user_id, role, is_active')
      .eq('user_id', currentUser?.user?.id)
      .single();
    
    if (adminError) {
      console.error('‚ùå Erro ao acessar admin_users_pet:', adminError);
      
      // Se n√£o conseguir acessar, vamos tentar uma abordagem diferente
      console.log('3Ô∏è‚É£ Tentando abordagem alternativa...');
      
      // Vamos usar uma fun√ß√£o RPC para contornar o problema
      const { data: rpcResult, error: rpcError } = await supabase.rpc('get_current_admin_status');
      
      if (rpcError) {
        console.error('‚ùå Erro na fun√ß√£o RPC:', rpcError);
        console.log('\nüìã INSTRU√á√ïES MANUAIS:');
        console.log('1. Acesse o Supabase Dashboard');
        console.log('2. V√° para SQL Editor');
        console.log('3. Execute os seguintes comandos:');
        console.log('');
        console.log('-- Desabilitar RLS temporariamente');
        console.log('ALTER TABLE admin_users_pet DISABLE ROW LEVEL SECURITY;');
        console.log('');
        console.log('-- Remover pol√≠ticas problem√°ticas');
        console.log('DROP POLICY IF EXISTS "Only admins can view admin users" ON admin_users_pet;');
        console.log('DROP POLICY IF EXISTS "Only super admins can manage admin users" ON admin_users_pet;');
        console.log('');
        console.log('-- Criar pol√≠tica simples');
        console.log('CREATE POLICY "Users can view their own admin record" ON admin_users_pet FOR SELECT USING (auth.uid() = user_id);');
        console.log('');
        console.log('-- Reabilitar RLS');
        console.log('ALTER TABLE admin_users_pet ENABLE ROW LEVEL SECURITY;');
        
        return;
      }
    } else {
      console.log('‚úÖ Acesso √† tabela admin_users_pet funcionando:', adminCheck);
    }
    
    console.log('‚úÖ Corre√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
  }
};

// Executar a corre√ß√£o
fixAdminPolicies();

// Tamb√©m exportar para uso manual
window.fixAdminPolicies = fixAdminPolicies;

console.log('\nüîß Script carregado! Execute fixAdminPolicies() para tentar a corre√ß√£o.');
console.log('\nüìã Se n√£o funcionar, siga as instru√ß√µes manuais que aparecer√£o.');