import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://hudiuukaoxxzxdcydgky.supabase.co'
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh1ZGl1dWthb3h4enhkY3lkZ2t5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2NTgwNDYsImV4cCI6MjA3MTIzNDA0Nn0.q4vojkhRTB1eoLu4vgERihYzRVK7NbJsxKuLW3mLOFA'

const supabase = createClient(supabaseUrl, supabaseKey)

async function fixSchemaMismatch() {
  console.log('üîç Identificando discrep√¢ncia de schema...\n')

  // Teste 1: Inserir com valores num√©ricos puros
  console.log('1. Testando inser√ß√£o com valores num√©ricos:')
  try {
    const { data, error } = await supabase
      .from('pets_pet')
      .insert({
        name: 'Teste Numeric',
        species: 'Cachorro',
        breed: 'Test',
        age: '2 anos',
        weight: 25.5,  // N√∫mero puro
        height: 60,    // N√∫mero puro
        color: 'Marrom',
        gender: 'Macho'
      })
      .select()

    if (error) {
      console.log('   ‚ùå Erro com n√∫meros:', error.message)
      console.log('   ‚ùå Code:', error.code)
    } else {
      console.log('   ‚úÖ Sucesso com n√∫meros!')
      // Limpar o registro de teste
      await supabase.from('pets_pet').delete().eq('id', data[0].id)
    }
  } catch (error) {
    console.log('   ‚ùå Erro capturado:', error.message)
  }

  // Teste 2: Inserir com strings num√©ricas
  console.log('\n2. Testando inser√ß√£o com strings num√©ricas:')
  try {
    const { data, error } = await supabase
      .from('pets_pet')
      .insert({
        name: 'Teste String Numeric',
        species: 'Gato',
        breed: 'Test',
        age: '1 ano',
        weight: '4.5',  // String num√©rica
        height: '30',   // String num√©rica
        color: 'Preto',
        gender: 'F√™mea'
      })
      .select()

    if (error) {
      console.log('   ‚ùå Erro com strings num√©ricas:', error.message)
      console.log('   ‚ùå Code:', error.code)
    } else {
      console.log('   ‚úÖ Sucesso com strings num√©ricas!')
      // Limpar o registro de teste
      await supabase.from('pets_pet').delete().eq('id', data[0].id)
    }
  } catch (error) {
    console.log('   ‚ùå Erro capturado:', error.message)
  }

  // Teste 3: Inserir com strings com unidades (como o frontend envia)
  console.log('\n3. Testando inser√ß√£o com strings com unidades:')
  try {
    const { data, error } = await supabase
      .from('pets_pet')
      .insert({
        name: 'Teste String Units',
        species: 'Cachorro',
        breed: 'Test',
        age: '3 anos',
        weight: '15kg',  // String com unidade
        height: '50cm',  // String com unidade
        color: 'Branco',
        gender: 'Macho'
      })
      .select()

    if (error) {
      console.log('   ‚ùå Erro com strings com unidades:', error.message)
      console.log('   ‚ùå Code:', error.code)
    } else {
      console.log('   ‚úÖ Sucesso com strings com unidades!')
      // Limpar o registro de teste
      await supabase.from('pets_pet').delete().eq('id', data[0].id)
    }
  } catch (error) {
    console.log('   ‚ùå Erro capturado:', error.message)
  }

  console.log('\nüìã An√°lise de Schema:')
  console.log('   ‚Ä¢ Se apenas n√∫meros funcionam: campos s√£o NUMERIC/INTEGER')
  console.log('   ‚Ä¢ Se strings num√©ricas funcionam: campos s√£o NUMERIC com convers√£o')
  console.log('   ‚Ä¢ Se strings com unidades funcionam: campos s√£o TEXT')
  console.log('   ‚Ä¢ Se nada funciona: problema de RLS/autentica√ß√£o')

  console.log('\nüîß Recomenda√ß√µes:')
  console.log('   1. Atualizar interface Pet para usar number em weight/height')
  console.log('   2. Converter strings para n√∫meros no frontend antes de enviar')
  console.log('   3. Ou alterar schema do banco para TEXT se preferir manter unidades')
}

fixSchemaMismatch()